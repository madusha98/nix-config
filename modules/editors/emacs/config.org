

#+TITLE: GNU Emacs Confi 
#+AUTHOR:
 ebadfd <ebadfd@proton.me>
#+DESCRIPTION: personal configs for emacs
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#default-variables][Default variables]]
  - [[#package-system-setup][Package system setup]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#fuzzy-text-search][Fuzzy Text Search]]
- [[#backup-auto-save][BACKUP (Auto save)]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#dired][DIRED]]
- [[#basic-gui-configurations][BASIC GUI CONFIGURATIONS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
- [[#ivy-counsel][IVY (Counsel)]]
- [[#diminish][DIMINISH]]
- [[#flycheck][FLYCHECK]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
- [[#company][COMPANY]]
- [[#which-key][WHICH-KEY]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#veterm][Veterm]]
- [[#color-theme][COLOR THEME]]
- [[#sudo-edit][SUDO EDIT]]
- [[#transparency][TRANSPARENCY]]
- [[#development-tools][DEVELOPMENT TOOLS]]
  - [[#parenthesis-auto-close][Parenthesis Auto close]]
  - [[#rainbow-delimeter][Rainbow delimeter]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#center-org-mode-documents][Center Org mode documents]]
- [[#lsp-config][LSP CONFIG]]
  - [[#lsp-mode-initial-setup][LSP Mode initial setup]]
  - [[#lsp-ui][LSP ui]]
  - [[#company-mode][Company Mode]]
  - [[#lsp-language-spupport][LSP language spupport]]
- [[#project][PROJECT]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** Default variables

#+begin_src emacs-lisp
;; System font sizes
(defvar default-font-size 110)
(defvar default-variable-font-size 120)

;; Make frame transparency overridable
(defvar efs/frame-transparency '(90 . 90))
#+end_src

** Package system setup 

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

(setq evil-want-keybinding nil)

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here 
  ;; for documentation purposes in case you need it.  
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor)

;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

#+end_src

** General Keybindings

TODO: add console-switch-buffer key binding to switch keys

#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(unless (package-installed-p 'general)
   (package-install 'general))

 (require 'general)
 (general-evil-setup)

(general-create-definer leader-keys
:states '(normal insert visual emacs)
:keymaps 'override
:prefix "SPC" ;; set leader
:global-prefix "M-SPC") ;; access leader in insert mode

; misc keybindings
(leader-keys
  "." '(find-file :wk "Find file")
  "TAB TAB" '(comment-line :wk "Comment lines"))

(leader-keys
  "f" '(:ignore t :wk "Find")
  "f r" '(counsel-recentf :wk "Find recent files")
  "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config"))

(leader-keys
  "t" '(:ignore t :wk "Toggle")
  "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
  "t t" '(visual-line-mode :wk "Toggle truncated lines")
  "t v" '(vterm-other-window :wk "Toggle vterm"))

(leader-keys
  "s" '(:ignore t :wk "Search")
  "s f" '(fzf-git-files :wk "Search git project")
  "s d" '(fzf-git-files :wk "Search no git")
  "s G" '(fzf-grep :wk "Grep all")
  "s g" '(fzf-grep-in-dir :wk "Grep dir"))

(leader-keys
  "b" '(:ignore t :wk "buffer")
  "b b" '(switch-to-buffer :wk "Switch buffer")
  "b i" '(ibuffer :wk "List all availible buffers")
  "b k" '(kill-this-buffer :wk "Kill this buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer :wk "Reload buffer"))

(leader-keys
  "e" '(:ignore t :wk "Evaluate / Neotree")    
  "e t" '(neotree-dir :wk "Open directory in neotree")
  "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
  "e d" '(eval-defun :wk "Evaluate defun containing or after point")
  "e e" '(eval-expression :wk "Evaluate and elisp expression")
  "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
  "e r" '(eval-region :wk "Evaluate elisp in region"))

(leader-keys
  "h" '(:ignore t :wk "Help")
  "h f" '(describe-function :wk "Describe function")
  "h v" '(describe-variable :wk "Describe variable")
  "h r r" '(reload-init-file :wk "Reload emacs config"))

(leader-keys
  "d" '(:ignore t :wk "Dired")
  "d d" '(dired :wk "Open dired")
  "d j" '(dired-jump :wk "Dired jump to current")
  "d n" '(neotree-dir :wk "Open directory in neotree")
  "d p" '(peep-dired :wk "Peep-dired"))

 (leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window"))

#+end_src

** Fuzzy Text Search

#+begin_src emacs-lisp
(use-package fzf
  :bind
    ;; Don't forget to set keybinds!
  :config
  (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        fzf/grep-command "grep -nrH"
        fzf/position-bottom t
        fzf/window-height 15))
#+end_src


* BACKUP (Auto save)

#+begin_src emacs-lisp
; backup dir
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

;; Autosave directory
(setq auto-save-file-name-transforms
      `((".*" "~/.local/share/Trash/emacs/auto-save" t)))

;; Save history file
(setq savehist-file "~/.local/share/Trash/emacs/history")
#+end_src

* ALL THE ICONS

#+begin_src emacs-lisp

;; NOTE: The first time you load your configuration on a new machine, you'll
;; need to run the following command interactively so that mode line icons
;; display correctly:
;;
;; M-x all-the-icons-install-fonts
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
* FONTS

** Setting the Font Face

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "FiraMono Nerd Font"
  :height default-font-size)
(set-face-attribute 'fixed-pitch nil
  :font "FiraMono Nerd Font"
  :height default-font-size)
(set-face-attribute 'variable-pitch nil
  :font "FiraMono Nerd Font"
  :height default-variable-font-size)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "FiraMono Nerd Font-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
 
#+end_src

** Zooming In/Out

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* DIRED

#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src

* BASIC GUI CONFIGURATIONS

** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; line number mode
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src


* IVY (Counsel)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :diminish
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

* DIMINISH

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* FLYCHECK

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* ORG MODE

** Enabling Table of Contents

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Disable Electric Indent

#+begin_src emacs-lisp
 (electric-indent-mode -1)
#+end_src

** Source Code Block Tag Expansion

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* COMPANY
Text completion framework for emacs

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* WHICH-KEY

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

* RELOAD EMACS

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* SHELLS AND TERMINALS
** Veterm

#+begin_src emacs-lisp
(use-package vterm
    :ensure t
:config
(setq shell-file-name "/run/current-system/sw/bin/zsh"
      vterm-max-scrollback 5000))

(defface vterm-color-red
  `((t :inherit term-color-red))
  "Face used to render red color code.
The foreground color is used as ANSI color 1 and the background
color is used as ANSI color 9."
  :group 'vterm)
#+end_src

* COLOR THEME

#+begin_src emacs-lisp
;; TODO: setup color scheme
(add-to-list 'custom-theme-load-path  "~/.emacs.d/themes/")
(load-theme 'cozy-bear t)
;; (load-theme 'tango-dark t)
#+end_src

* SUDO EDIT

sudo edit allows to edit file as root and switch the role to root on a existing file

#+begin_src emacs-lisp
(unless (package-installed-p 'sudo-edit)
  (package-install 'sudo-edit))

(use-package sudo-edit)
(leader-keys
  "fu" '(sudo-edit-find-file :wk "Sudo find file")
  "fU" '(sudo-edit :wk "Sudo edit file"))
#+end_src

* TRANSPARENCY 

#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 80)
(add-to-list 'default-frame-alist '(alpha-background . 80))
#+end_src

* DEVELOPMENT TOOLS

** Parenthesis Auto close

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (smartparens-global-mode 1)
  (require 'smartparens-config)

  (diminish 'smartparens-mode))

;; fix parens for snippets
(defvar smartparens-mode-original-value)

#+end_src

** Rainbow delimeter
add color pair highlight

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))

#+end_src

** Rainbow mode

display actual color with the hex code

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

** Center Org mode documents

#+begin_src emacs-lisp

;;; ----- Document Centering -----

(defvar center-document-desired-width 90
  "The desired width of a document centered in the window.")

(defun center-document--adjust-margins ()
  ;; Reset margins first before recalculating
  (set-window-parameter nil 'min-margins nil)
  (set-window-margins nil nil)

  ;; Adjust margins if the mode is on
  (when center-document-mode
    (let ((margin-width (max 0
			     (truncate
			      (/ (- (window-width)
				    center-document-desired-width)
				 2.0)))))
      (when (> margin-width 0)
	(set-window-parameter nil 'min-margins '(0 . 0))
	(set-window-margins nil margin-width margin-width)))))

(define-minor-mode center-document-mode
  "Toggle centered text layout in the current buffer."
  :lighter " Centered"
  :group 'editing
  (if center-document-mode
      (add-hook 'window-configuration-change-hook #'center-document--adjust-margins 'append 'local)
    (remove-hook 'window-configuration-change-hook #'center-document--adjust-margins 'local))
  (center-document--adjust-margins))

(add-hook 'org-mode-hook #'center-document-mode)
#+end_src

* LSP CONFIG

** LSP Mode initial setup

#+begin_src emacs-lisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (typescript-mode . lsp-deferred)
  :hook (go-mode . lsp-deferred)
  :hook (rust-mode . lsp-deferred)
  :hook (terraform-mode . lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))
#+end_src

** LSP ui 

improve the lsp ui 

#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)
#+end_src

** Company Mode

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

** LSP language spupport
*** Go

#+begin_src emacs-lisp
;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(use-package company-go
  :after (company go-mode))
#+end_src

*** Terraform

#+begin_src emacs-lisp
(use-package 
  :ensure terraform-mode)
#+end_src

*** Nix

#+begin_src emacs-lisp
(use-package lsp-nix
  :ensure lsp-mode
  :after (lsp-mode)
  :demand t
  :custom
  (lsp-nix-nil-formatter ["nixfmt"]))

(use-package nix-mode
  :hook (nix-mode . lsp-deferred)
  :ensure t)
#+end_src

*** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :commands rust-format-buffer
  :bind (:map rust-mode-map
		("C-c <tab>" . rust-format-buffer))
  :hook ((rust-mode . cargo-minor-mode)
	   (rust-mode . subword-mode)))

(use-package cargo
  :ensure t
  :after rust-mode)
#+end_src


*** Bash

#+begin_src emacs-lisp
(use-package sh-script
  :ensure nil
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

*** CSV

#+begin_src emacs-lisp
(use-package csv-mode :mode ("\\.\\(csv\\|tsv\\)\\'"))
#+end_src

*** Dockerfile

#+begin_src emacs-lisp
(use-package dockerfile-mode :delight "δ" :mode "Dockerfile\\'")
#+end_src

*** Typescript
#+begin_src emacs-lisp
(use-package typescript-mode
   :mode "\\.\\(ts\\|tsx\\)$"
  :init
  (setq-default typescript-indent-level 2))
#+end_src

*** JSON 

#+begin_src emacs-lisp
(use-package json-mode
  :delight "J"
  :mode "\\.json\\'"
  :hook (before-save . my/json-mode-before-save-hook)
  :preface
  (defun my/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer)))

  (defun my/json-array-of-numbers-on-one-line (encode array)
    "Print the arrays of numbers in one line."
    (let* ((json-encoding-pretty-print
            (and json-encoding-pretty-print
                 (not (loop for x across array always (numberp x)))))
           (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
      (funcall encode array)))
  :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))
#+end_src

*** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode "\\.\\(md\\|markdown\\)$")
#+end_src

*** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

*** Protobuf

#+begin_src emacs-lisp
(use-package protobuf-mode
  :mode "\\.proto$")
#+end_src

*** SQL
#+begin_src emacs-lisp
(use-package sql-mode
  :ensure nil
  :mode "\\.sql\\'")
#+end_src

* PROJECT 

#+begin_src emacs-lisp
(use-package project
  :config
  (add-to-list 'project-switch-commands '(magit-project-status "Magit" ?m)))
#+end_src
